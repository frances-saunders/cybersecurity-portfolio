{
  // Initiative schema for bundling AKS policy definitions
  "$schema": "https://schema.management.azure.com/schemas/2019-09-01/policyDefinitionSet.json#",

  // Unique internal name for the initiative
  "name": "aks-security-baseline-initiative",
  "type": "Microsoft.Authorization/policySetDefinitions",

  "properties": {
    // Human-readable display name for portal and CLI
    "displayName": "AKS Security Baseline Initiative",

    // High-level description of what this initiative enforces
    "description": "Comprehensive AKS hardening bundle covering container security, network isolation, and RBAC governance. Aligned with CIS Kubernetes Benchmark, NIST SP 800-53, and ISO 27001.",

    "metadata": {
      "version": "2.0.0",
      "category": "Kubernetes",
      "severity": "High",
      "source": "Frances Saunders Portfolio",
      "compliance": {
        "frameworks": [
          "NIST SP 800-53",
          "ISO 27001",
          "CIS Kubernetes Benchmark"
        ]
      }
    },

    // Parameters allow flexible enforcement across environments
    "parameters": {
      "privilegedEffect": {
        "type": "String",
        "allowedValues": ["Audit", "Deny", "Disabled"],
        "defaultValue": "Deny",
        "metadata": {
          "displayName": "Privileged Containers Effect",
          "description": "Control enforcement of privileged container restrictions."
        }
      },
      "registryEffect": {
        "type": "String",
        "allowedValues": ["Audit", "Deny", "Disabled"],
        "defaultValue": "Deny",
        "metadata": {
          "displayName": "Approved Registries Effect",
          "description": "Control enforcement of approved registry restrictions."
        }
      },
      "approvedRegistries": {
        "type": "Array",
        "defaultValue": [],
        "metadata": {
          "displayName": "Approved Registries",
          "description": "List of approved container registries."
        }
      },
      "netpolEffect": {
        "type": "String",
        "allowedValues": ["Audit", "Deny", "Disabled"],
        "defaultValue": "Audit",
        "metadata": {
          "displayName": "Network Policy Effect",
          "description": "Control enforcement of Kubernetes NetworkPolicy."
        }
      },
      "resourceLimitEffect": {
        "type": "String",
        "allowedValues": ["Audit", "Deny", "Disabled"],
        "defaultValue": "Audit",
        "metadata": {
          "displayName": "Resource Limits Effect",
          "description": "Require CPU/Memory limits on all pods."
        }
      },
      "namespaceEffect": {
        "type": "String",
        "allowedValues": ["Audit", "Deny", "Disabled"],
        "defaultValue": "Audit",
        "metadata": {
          "displayName": "Namespace Governance Effect",
          "description": "Restrict workloads from being deployed into the default namespace."
        }
      },
      "keyVaultEffect": {
        "type": "String",
        "allowedValues": ["Audit", "Deny", "Disabled"],
        "defaultValue": "Audit",
        "metadata": {
          "displayName": "Key Vault Secrets Effect",
          "description": "Ensure Kubernetes secrets are sourced from Azure Key Vault."
        }
      }
    },

    // List of policy definitions bundled into this initiative
    "policyDefinitions": [
      {
        // Block privileged container workloads
        "policyDefinitionReferenceId": "aks-block-privileged-containers",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/aks-block-privileged-containers",
        "parameters": {
          "effect": { "value": "[parameters('privilegedEffect')]" }
        }
      },
      {
        // Restrict workloads to use only approved registries
        "policyDefinitionReferenceId": "aks-restrict-approved-registries",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/aks-restrict-approved-registries",
        "parameters": {
          "effect": { "value": "[parameters('registryEffect')]" },
          "approvedRegistries": { "value": "[parameters('approvedRegistries')]" }
        }
      },
      {
        // Enforce network policies in every namespace
        "policyDefinitionReferenceId": "aks-enforce-network-policy",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/aks-enforce-network-policy",
        "parameters": {
          "effect": { "value": "[parameters('netpolEffect')]" }
        }
      },
      {
        // Require resource requests/limits for all pods
        "policyDefinitionReferenceId": "aks-require-resource-limits",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/aks-require-resource-limits",
        "parameters": {
          "effect": { "value": "[parameters('resourceLimitEffect')]" }
        }
      },
      {
        // Restrict workloads from running in default namespace
        "policyDefinitionReferenceId": "aks-restrict-default-namespace",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/aks-restrict-default-namespace",
        "parameters": {
          "effect": { "value": "[parameters('namespaceEffect')]" }
        }
      },
      {
        // Ensure all Kubernetes secrets are backed by Azure Key Vault
        "policyDefinitionReferenceId": "aks-require-keyvault-secrets",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/aks-require-keyvault-secrets",
        "parameters": {
          "effect": { "value": "[parameters('keyVaultEffect')]" }
        }
      }
    ]
  }
}
